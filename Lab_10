# from sage.combinat.q_analogues import *
# from sage.combinat.sf.sfa import *
#
#
#
# Sym = SymmetricFunctions(QQ)
# Sym.inject_shorthands() - базиси:
# р - степененные суммы
# е - елементарные функции
# e[n].expend(m) - n - num of func, m - num of variables

def xmod(a,b,R):
    naive = a/b
    q = R(round(naive.real()) + round(naive.imag())*i)
    r = a - b*q
    return r


def gaus_gcd(a,b,R):
    if a == 0:
        return b, 0, 1
    if b == 0:
        return a, 1, 0
    r = xmod(a,b,R)
    #print(r,a,b)
    if r == 0:
        return R(round((a/b).real()) + round((a/b).imag())*i), b, 0
    a, b, r = gaus_gcd(b,r,R)
    return R(round((a/b).real()) + round((a/b).imag())*i), b, r
