
#---------------------------------- Task 1 ----------------------------------
import itertools
def eye_elem(S): #return elements
    res = []
    for s in S:
        if s != S[0]:
            res.append(s)
    return res

def clear(l):
    t = []
    for k in l:
        if set(k) not in t:
            t.append(set(k))
    return [list(a) for a in t]

def clear_1(lst):

    def _check(l1,l2):
        res = True
        for i in l1:
            if i not in l2:
                res = False
        return res

    res = lst[:]
    for i in lst:
        for j in lst:
            if len(i) < len(j):
                if _check(i,j):
                    if j in res:
                        res.remove(j)
    return res


def task_1(S,n):
    res = []
    not_used = [] #list of lists [[],[],[],[]...[]]
    elem = eye_elem(S)
    for i in elem:
        for j in elem:
            if i != j:
                if S.subgroup([i,j]) == S:       #and (i,j) not in res and (j,i) not in res :
                    res.append((i,j))
                else:
                    not_used.append([i,j])
    not_used = clear(not_used)
    while True:
        ktp = False
        not_used_tmp = not_used[:]
        for i in range(len(not_used)):
            for j in elem:
                if not j in list(itertools.permutations(not_used[i])) :
                    tmp = not_used[i] + list(j)
                    print(len(tmp))
                    if len(tmp) > n:
                        res = clear(res)
                        res = clear_1(res)
                        return res, len(res)
                    if S.subgroup(tmp) == S:
                        res.append(tmp)
                        ktp = True
                    else:
                        if all(list(itertools.permutations(tmp))) not in not_used_tmp:
                            not_used_tmp.append(tmp)
            not_used_tmp.remove(not_used_tmp[0])
        not_used = clear(not_used_tmp)
        not_used = clear_1(not_used)
        if not ktp:
            break
    res = clear(res)
    res = clear_1(res)
    return res, len(res)
n = 4
res = task_1(SymmetricGroup(4),n)
for i in res[0]:
    print(i)
print(res[1])
#---------------------------------- Task 2 ----------------------------------
def sub(s):
    return s.subgroups()

sub(SymmetricGroup(4))
sub(AlternatingGroup(4))
sub(SymmetricGroup(5))
sub(AlternatingGroup(5))

#---------------------------------- Task 3 ----------------------------------
def ln(a):
    counter = 0
    for i in range(len(a)):
        if a[i].isalnum():
            counter += 1
    return counter

def is_pair(a):
    l = ln(a)
    if a in AlternatingGroup(l):
        return True
    return False


a1 = raw_input('First element: ')
a2 = raw_input('Second element: ')
print("Element {} is pair -- {}".format(a1,is_pair(a1)))
print("Element {} is pair -- {}".format(a2,is_pair(a2)))

l = max(ln(a1),ln(a2))
S = SymmetricGroup(l)
A = AlternatingGroup(l)
a1 = SymmetricGroup([a1])
a2 = SymmetricGroup([a2])
subgro = S.subgroup([a1,a2])
print('Order of subgroup is {}'.format(order(subgro)))

print('Subgroup is equal to SymmetricGroup -- {}'.format(subgro == S))
print('Subgroup is equal to AlternatingGroup -- {}'.format(subgro == A))

def is_pair_v2(a,n):
    if a in AlternatingGroup(n):
        return True
    return False

n = int(input('Iput n '))
S = SymmetricGroup(n)
s = S.random_element()
A = AlternatingGroup(n)
a = A.random_element()

print("Element {} is pair -- {}".format(s,is_pair_v2(s,n)))
print("Element {} is pair -- {}".format(a,is_pair_v2(a,n)))

subgro = S.subgroup([s,a])
print('Order of subgroup is {}'.format(order(subgro)))

print('Subgroup is equal to SymmetricGroup -- {}'.format(subgro == S))
print('Subgroup is equal to AlternatingGroup -- {}'.format(subgro == A))
